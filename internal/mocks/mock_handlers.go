

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nuvotlyuba/Go-yandex/internal/transport/handler (interfaces: Handlers)

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
        http "net/http"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
        ctrl     *gomock.Controller
        recorder *MockHandlersMockRecorder
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
        mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
        mock := &MockHandlers{ctrl: ctrl}
        mock.recorder = &MockHandlersMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
        return m.recorder
}

// GetConnDBHandler mocks base method.
func (m *MockHandlers) GetConnDBHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "GetConnDBHandler", arg0, arg1)
}

// GetConnDBHandler indicates an expected call of GetConnDBHandler.
func (mr *MockHandlersMockRecorder) GetConnDBHandler(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnDBHandler", reflect.TypeOf((*MockHandlers)(nil).GetConnDBHandler), arg0, arg1)
}

// GetURLHandler mocks base method.
func (m *MockHandlers) GetURLHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "GetURLHandler", arg0, arg1)
}

// GetURLHandler indicates an expected call of GetURLHandler.
func (mr *MockHandlersMockRecorder) GetURLHandler(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLHandler", reflect.TypeOf((*MockHandlers)(nil).GetURLHandler), arg0, arg1)
}

// PostURLBatchHandler mocks base method.
func (m *MockHandlers) PostURLBatchHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "PostURLBatchHandler", arg0, arg1)
}

// PostURLBatchHandler indicates an expected call of PostURLBatchHandler.
func (mr *MockHandlersMockRecorder) PostURLBatchHandler(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostURLBatchHandler", reflect.TypeOf((*MockHandlers)(nil).PostURLBatchHandler), arg0, arg1)
}

// PostURLHandler mocks base method.
func (m *MockHandlers) PostURLHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "PostURLHandler", arg0, arg1)
}

// PostURLHandler indicates an expected call of PostURLHandler.
func (mr *MockHandlersMockRecorder) PostURLHandler(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostURLHandler", reflect.TypeOf((*MockHandlers)(nil).PostURLHandler), arg0, arg1)
}

// PostURLJsonHandler mocks base method.
func (m *MockHandlers) PostURLJsonHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "PostURLJsonHandler", arg0, arg1)
}

// PostURLJsonHandler indicates an expected call of PostURLJsonHandler.
func (mr *MockHandlersMockRecorder) PostURLJsonHandler(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostURLJsonHandler", reflect.TypeOf((*MockHandlers)(nil).PostURLJsonHandler), arg0, arg1)
}
